## Smolbars

[![Gem Version](https://badge.fury.io/rb/smolbars.png)](http://badge.fury.io/rb/handlebars)
[![Build Status](https://travis-ci.org/cowboyd/handlebars.rb.png?branch=master)](https://travis-ci.org/cowboyd/handlebars.rb)
[![Dependency Status](https://gemnasium.com/cowboyd/handlebars.rb.png)](https://gemnasium.com/cowboyd/handlebars.rb)


This uses [mini_racer][1] to bind to the _actual_ JavaScript implementation of
[Handlebars.js][2] so that you can use it from ruby. This is a fork of [handlebars.rb][3] to
change out the deprecated [therubyracer][4] JS integration. 99% the same idea as the better-named
[minibars][5].

Please be mindful of how this library works: it brings in the full libv8 JS VM to your ruby environment. Each
`Context` is a full blown JS machine (memory management, JIT, etc). This fork does not support attaching ruby
functions to the JS VM.

Note on security: do not compile untrusted Handlebars templates. We compile Handlebars template by building ad-hoc
javascript statements, a bad actor could perform an SQL-injection like attack using the v8 environment for bad things.

## Usage

### Simple stuff

    require 'smolbars'
    smolbars = Smolbars::Context.new
    template = smolbars.compile("{{say}} {{what}}")
    template.call(:say => "Hey", :what => "Yuh!") #=> "Hey Yuh!"

### Helpers

You must write helpers with JavaScript. The JavaScript code should include calls to the Handlebars class registration
function.

	require 'smolbars'
	helper = %Q{
		Handlebars.registerHelper("nthTimes", function(n, options){
		  var buffer = "";

		  for(var i = 0; i < n; i++) {
			buffer += options.fn();
		  }

		  return buffer;
		});
	}
	smolbars = Smolbars::Context.new
	smolbars.eval(helper)
	template = smolbars.compile('{{#nthTimes 2}}yep {{/nthTimes}}hurrah!')
	template.call # 'yep yep hurrah!'

### Partials

You must write partials with JavaScript. The JavaScript code should include calls to the Handlebars class registration
function.

	require 'smolbars'
	partial = %Q{
		Handlebars.registerPartial("legend", "I am {{ who }}");
	}
	smolbars = Smolbars::Context.new
	smolbars.eval(partial)
	template = smolbars.compile('{{> legend}}')
	template.call # 'I am Legend!'

### Security

In general, you should not trust user-provided templates: a template can call any method
(with no arguments) or access any property on any object in the `Smolbars::Context`.

If you'd like to render user-provided templates, you'd want to make sure you do so in a
sanitized Context, e.g. no filesystem access, read-only or no database access, etc.

You can try setting the timeout on a Smolbars::Context through kwargs that are passed to the
underlying JS instance

    Smolbars::Context.new(timeout: 500)

## Test

    rspec spec/


[1]: https://github.com/rubyjs/mini_racer "mini_racer"
[2]: https://github.com/wycats/handlebars.js "Handlebars JavaScript templating library"
[3]: https://github.com/cowboyd/handlebars.rb "Handlebars Ruby library"
[4]: https://github.com/cowboyd/therubyracer "The Ruby Racer"
[5]: https://github.com/combinaut/minibars "Minibars"